LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY pwm_controller IS
	
	PORT( 
		nrst,clk,equal,pwm_on: in  std_logic;
		valid,load_per,load_dc,count,clear_c: out std_logic
	);
END pwm_controller;

ARCHITECTURE RTL OF pwm_controller IS
	type state is (su, s0, s1, s2,s3,s4,s5,s6,s7,s8,s9,s10); 
	
	signal present_state, next_state : state;
BEGIN
	--next state decoder
	next_state_dec_proc:
	process(present_state,init,avail,equal)
		variable n_s : state;
	begin
		case present_state is
			when s0 => 
				if(init='1') then
					if(avail='1') then
						n_s:=s1;
					else
						n_s:=s0;
					end if;
				else
					n_s:=s0;
				end if;
			when s1 =>
				n_s:=s2;
			when s2 =>
				if(avail='1') then
					n_s:=s2;
				else
					n_s:=s3;
				end if;
			when s3=>
				if(avail='1') then
					n_s:=s4;
				else
					n_s:=s3;
				end if;
			when s4=>
				n_s:=s5;
			when s5=>
				if(avail='1') then
					n_s:=s5;
				else
					n_s:=s6;
				end if;
			when s6=>
				if(equal='1') then
					n_s:=s7;
				else
					n_s:=s6;
				end if;
			when s7=>
				if(init='1') then
					n_s:=s0;
				else
					if(avail='1') then
						n_s:=s8;
					else
						n_s:=s6;
					end if;
				end if;
			when s8=>
				n_s:=s9;
			when s9=>
				if(avail='1') then
					n_s:=s9;
				else
					n_s:=s10;
				end if;
			when s10=>
				n_s:=s6;
			when others => n_s := Su;
		end case;
		
		next_state <= n_s after 5 ns;
	end process;
	
	
	--memory
	mem_proc:
	process(rst,clk)
	begin
		if rst = '1' then
			present_state <= S0 after 5 ns;
		elsif rising_edge(clk) then
			present_state <= next_state after 5 ns;
		end if;
	end process;
	
	--output decoder
	output_dec_proc:
	process(present_state) 		
	begin		
		case present_state is
			when s0 => 
				load_per<='0' after 5 ns;
				load_dc<='0' after 5 ns;
				count<='0' after 5 ns;
				clear_c<='1' after 5 ns;
				valid<= '0' after 5 ns;
				rdy<='0' after 5 ns;
			when s1 => 
				load_per<='1' after 5 ns;
				load_dc<='0' after 5 ns;
				count<='0' after 5 ns;
				clear_c<='0' after 5 ns;
				valid<= '0' after 5 ns;
				rdy<='0' after 5 ns;
			when s2 => 
				load_per<='0' after 5 ns;
				load_dc<='0' after 5 ns;
				count<='0' after 5 ns;
				clear_c<='0' after 5 ns;
				valid<= '0' after 5 ns;
				rdy<='1' after 5 ns;
			when s3 => 
				load_per<='0' after 5 ns;
				load_dc<='0' after 5 ns;
				count<='0' after 5 ns;
				clear_c<='0' after 5 ns;
				valid<= '0' after 5 ns;
				rdy<='0' after 5 ns;
			when s4 => 
				load_per<='0' after 5 ns;
				load_dc<='1' after 5 ns;
				count<='0' after 5 ns;
				clear_c<='0' after 5 ns;
				valid<= '0' after 5 ns;
				rdy<='0' after 5 ns;
			when s5 => 
				load_per<='0' after 5 ns;
				load_dc<='1' after 5 ns;
				count<='0' after 5 ns;
				clear_c<='0' after 5 ns;
				valid<= '0' after 5 ns;
				rdy<='1' after 5 ns;
			when s6 => 
				load_per<='0' after 5 ns;
				load_dc<='0' after 5 ns;
				count<='1' after 5 ns;
				clear_c<='0' after 5 ns;
				valid<= '1' after 5 ns;
				rdy<='0' after 5 ns;
			when s7 => 
				load_per<='0' after 5 ns;
				load_dc<='0' after 5 ns;
				count<='0' after 5 ns;
				clear_c<='1' after 5 ns;
				valid<= '0' after 5 ns;
				rdy<='0' after 5 ns;
			when s8 => 
				load_per<='0' after 5 ns;
				load_dc<='1' after 5 ns;
				count<='0' after 5 ns;
				clear_c<='0' after 5 ns;
				valid<= '0' after 5 ns;
				rdy<='0' after 5 ns;
			when s9 => 
				load_per<='0' after 5 ns;
				load_dc<='0' after 5 ns;
				count<='0' after 5 ns;
				clear_c<='0' after 5 ns;
				valid<= '0' after 5 ns;
				rdy<='1' after 5 ns;
			when s10 => 
				load_per<='0' after 5 ns;
				load_dc<='0' after 5 ns;
				count<='0' after 5 ns;
				clear_c<='0' after 5 ns;
				valid<= '0' after 5 ns;
				rdy<='0' after 5 ns;
			when others => 
				load_per<='X' after 5 ns;
				load_dc<='X' after 5 ns;
				count<='X' after 5 ns;
				clear_c<='X' after 5 ns;
				valid <= 'X' after 5 ns;
				rdy <= 'X' after 5 ns;
			
		end case;
		
	end process;
	
END ARCHITECTURE;