library ieee;
use ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use ieee.numeric_std.all;


entity cpu_controller_tb is
end cpu_controller_tb;

architecture tb of cpu_controller_tb is
    	Component CPU_Controller is
	PORT
	(
		nrst,clk,co:in  std_logic;
		OpCode:in  std_logic_vector(3 downto 0);
		pc_cnt,pc_ld,pwn_en,ir_ld,rw,memMux_sel,demux_sel,aluMux0_sel,aluMux1_sel,acu_ld,cycl_clr,cycle_cnt,pc_clr:out std_logic;
		alu_sel :out std_logic_vector(3 downto 0)
	);
	end component;	
	
		signal nrst,clk,co:std_logic;
		signal opcode,alu_sel:std_logic_vector(3 downto 0);
		signal pc_cnt,pc_ld,pwn_en,ir_ld,rw,memMux_sel,demux_sel,aluMux0_sel,aluMux1_sel,acu_ld,cycl_clr,cycle_cnt,pc_clr:std_logic;
		constant half_period: time := 15 ns;
		constant period: time := 30 ns;
	 
begin
    -- connecting testbench signals with cpu_controller component
    DUT : CPU_Controller port map 
	 (nrst => nrst, clk => clk, co => co,opcode=>opcode, pc_cnt=>pc_cnt 
	 pc_ld => pc_ld, pwn_en=>pwn_en, ir_ld=>ir_ld, rw=>rw, memMux_sel=>memMux_sel,
	 demux_sel=>demux_sel,aluMux0_sel=>aluMux0_sel,aluMux1_sel=>aluMux1_sel,acu_ld=>acu_ld,
	 cycl_clr=>cycl_clr,cycle_cnt=>cycle_cnt,pc_clr=>pc_clr);
	 
	 nrst<= '1', '0' after 6 ns;
	 clk<= not clk after half_period;	
	 
data_stimuli:process
begin
	avail<='0';
	init<='0';
	d_in<="00001111";
	wait for period_2;
	
	init<='1';
	avail<='1';
	wait for period_2;
	
	init<='0';
	avail<='1';
	wait for period;

	init<='0';
	avail<='0';
	d_in<="00000111";
	wait for period_2; 
	
	init<='0';
	avail<='1';
	wait for period;
	
	init<='0';
	avail<='0';
	wait for 180 ns;
	
	init<='0';
	avail<='1';
	d_in<="00001000";
	wait for period_2;
	
	init<='0';
	avail<='0';
	wait for 190 ns;

	init<='1';
	wait for period;
	wait;
end process;
end tb;